{"ast":null,"code":"import { signal } from '@angular/core';\nimport { of } from 'rxjs';\nimport { delay } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport class ProjectService {\n  constructor() {\n    this._data = [{\n      id: 1,\n      name: 'Project Alpha',\n      description: 'First',\n      createdAt: new Date().toISOString()\n    }, {\n      id: 2,\n      name: 'Project Beta',\n      description: 'Second',\n      createdAt: new Date().toISOString()\n    }, {\n      id: 3,\n      name: 'Project Gamma',\n      description: 'Third',\n      createdAt: new Date().toISOString()\n    }];\n    this.projects = signal(this._data);\n  }\n  list() {\n    return of(this.projects()).pipe(delay(300));\n  }\n  get(id) {\n    return of(this.projects().find(p => p.id === id) || null).pipe(delay(200));\n  }\n  add(payload) {\n    const id = Date.now();\n    const p = {\n      id,\n      name: payload.name || 'Untitled',\n      description: payload.description || '',\n      createdAt: new Date().toISOString()\n    };\n    this._data.unshift(p);\n    this.projects.set(this._data);\n    return of(p).pipe(delay(200));\n  }\n  update(id, payload) {\n    const idx = this._data.findIndex(p => p.id === id);\n    if (idx > -1) {\n      this._data[idx] = {\n        ...this._data[idx],\n        ...payload\n      };\n      this.projects.set(this._data);\n    }\n    return of(this._data.find(p => p.id === id) || null).pipe(delay(200));\n  }\n  delete(id) {\n    this._data = this._data.filter(p => p.id !== id);\n    this.projects.set(this._data);\n    return of(true).pipe(delay(200));\n  }\n  static {\n    this.ɵfac = function ProjectService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || ProjectService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ProjectService,\n      factory: ProjectService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["signal","of","delay","ProjectService","constructor","_data","id","name","description","createdAt","Date","toISOString","projects","list","pipe","get","find","p","add","payload","now","unshift","set","update","idx","findIndex","delete","filter","factory","ɵfac","providedIn"],"sources":["/home/subramanyahegade/Downloads/task-dashboard/src/app/core/services/project.service.ts"],"sourcesContent":["import { Injectable, signal } from '@angular/core';\nimport { of } from 'rxjs';\nimport { delay, map } from 'rxjs/operators';\nimport { Project } from '../models/project.model';\n\n@Injectable({providedIn:'root'})\nexport class ProjectService {\n  private _data: Project[] = [\n    { id:1, name:'Project Alpha', description:'First', createdAt: new Date().toISOString() },\n    { id:2, name:'Project Beta', description:'Second', createdAt: new Date().toISOString() },\n    { id:3, name:'Project Gamma', description:'Third', createdAt: new Date().toISOString() }\n  ];\n  public projects = signal<Project[]>(this._data);\n  list(){ return of(this.projects()).pipe(delay(300)); }\n  get(id:number){ return of(this.projects().find(p=>p.id===id) || null).pipe(delay(200)); }\n  add(payload: Partial<Project>){ const id = Date.now(); const p:Project = { id, name: payload.name||'Untitled', description: payload.description||'', createdAt: new Date().toISOString() }; this._data.unshift(p); this.projects.set(this._data); return of(p).pipe(delay(200)); }\n  update(id:number, payload: Partial<Project>){ const idx = this._data.findIndex(p=>p.id===id); if(idx>-1){ this._data[idx] = {...this._data[idx], ...payload}; this.projects.set(this._data); } return of(this._data.find(p=>p.id===id) || null).pipe(delay(200)); }\n  delete(id:number){ this._data = this._data.filter(p=>p.id!==id); this.projects.set(this._data); return of(true).pipe(delay(200)); }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}