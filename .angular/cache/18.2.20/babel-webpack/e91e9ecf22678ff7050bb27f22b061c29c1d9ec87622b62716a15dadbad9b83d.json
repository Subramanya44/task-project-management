{"ast":null,"code":"import { signal } from '@angular/core';\nimport { of } from 'rxjs';\nimport { delay, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    this.users = [{\n      id: 1,\n      name: 'Admin',\n      email: 'admin@example.com',\n      role: 'admin',\n      token: 'admintoken'\n    }, {\n      id: 2,\n      name: 'User',\n      email: 'user@example.com',\n      role: 'user',\n      token: 'usertoken'\n    }];\n    this.currentUser = signal(this._load());\n  }\n  _load() {\n    const raw = localStorage.getItem('currentUser');\n    return raw ? JSON.parse(raw) : null;\n  }\n  _save(user) {\n    this.currentUser.set(user);\n    if (user) localStorage.setItem('currentUser', JSON.stringify(user));else localStorage.removeItem('currentUser');\n  }\n  login(email, password) {\n    // mock: accept any password, find by email\n    const user = this.users.find(u => u.email === email);\n    return of(user || null).pipe(delay(400), tap(u => {\n      if (u) this._save(u);\n    }));\n  }\n  register(name, email, password) {\n    const id = Date.now();\n    const user = {\n      id,\n      name,\n      email,\n      role: 'user',\n      token: 'token' + id\n    };\n    this.users.push(user);\n    return of(user).pipe(delay(400), tap(u => this._save(u)));\n  }\n  logout() {\n    this._save(null);\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["signal","of","delay","tap","AuthService","constructor","users","id","name","email","role","token","currentUser","_load","raw","localStorage","getItem","JSON","parse","_save","user","set","setItem","stringify","removeItem","login","password","find","u","pipe","register","Date","now","push","logout","factory","ɵfac","providedIn"],"sources":["/home/subramanyahegade/Downloads/task-dashboard/src/app/core/services/auth.service.ts"],"sourcesContent":["import { Injectable, signal } from '@angular/core';\nimport { of } from 'rxjs';\nimport { delay, tap } from 'rxjs/operators';\nimport { User } from '../models/user.model';\n\n@Injectable({providedIn: 'root'})\nexport class AuthService {\n  private users: User[] = [\n    { id:1, name:'Admin', email:'admin@example.com', role:'admin', token:'admintoken' },\n    { id:2, name:'User', email:'user@example.com', role:'user', token:'usertoken' }\n  ];\n  public currentUser = signal<User| null>(this._load());\n  private _load(): User | null {\n    const raw = localStorage.getItem('currentUser');\n    return raw ? JSON.parse(raw) : null;\n  }\n  private _save(user: User | null){\n    this.currentUser.set(user);\n    if(user) localStorage.setItem('currentUser', JSON.stringify(user));\n    else localStorage.removeItem('currentUser');\n  }\n  login(email: string, password: string){\n    // mock: accept any password, find by email\n    const user = this.users.find(u => u.email === email);\n    return of(user || null).pipe(delay(400), tap(u => { if(u) this._save(u); }));\n  }\n  \n  register(name:string,email:string,password:string){\n    const id = Date.now();\n    const user: User = { id, name, email, role: 'user', token: 'token'+id };\n    this.users.push(user);\n    return of(user).pipe(delay(400), tap(u => this._save(u)));\n  }\n  logout(){ this._save(null); }\n}\n"],"mappings":"AAAA,SAAqBA,MAAM,QAAQ,eAAe;AAClD,SAASC,EAAE,QAAQ,MAAM;AACzB,SAASC,KAAK,EAAEC,GAAG,QAAQ,gBAAgB;;AAI3C,OAAM,MAAOC,WAAW;EADxBC,YAAA;IAEU,KAAAC,KAAK,GAAW,CACtB;MAAEC,EAAE,EAAC,CAAC;MAAEC,IAAI,EAAC,OAAO;MAAEC,KAAK,EAAC,mBAAmB;MAAEC,IAAI,EAAC,OAAO;MAAEC,KAAK,EAAC;IAAY,CAAE,EACnF;MAAEJ,EAAE,EAAC,CAAC;MAAEC,IAAI,EAAC,MAAM;MAAEC,KAAK,EAAC,kBAAkB;MAAEC,IAAI,EAAC,MAAM;MAAEC,KAAK,EAAC;IAAW,CAAE,CAChF;IACM,KAAAC,WAAW,GAAGZ,MAAM,CAAa,IAAI,CAACa,KAAK,EAAE,CAAC;;EAC7CA,KAAKA,CAAA;IACX,MAAMC,GAAG,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IAC/C,OAAOF,GAAG,GAAGG,IAAI,CAACC,KAAK,CAACJ,GAAG,CAAC,GAAG,IAAI;EACrC;EACQK,KAAKA,CAACC,IAAiB;IAC7B,IAAI,CAACR,WAAW,CAACS,GAAG,CAACD,IAAI,CAAC;IAC1B,IAAGA,IAAI,EAAEL,YAAY,CAACO,OAAO,CAAC,aAAa,EAAEL,IAAI,CAACM,SAAS,CAACH,IAAI,CAAC,CAAC,CAAC,KAC9DL,YAAY,CAACS,UAAU,CAAC,aAAa,CAAC;EAC7C;EACAC,KAAKA,CAAChB,KAAa,EAAEiB,QAAgB;IACnC;IACA,MAAMN,IAAI,GAAG,IAAI,CAACd,KAAK,CAACqB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACnB,KAAK,KAAKA,KAAK,CAAC;IACpD,OAAOR,EAAE,CAACmB,IAAI,IAAI,IAAI,CAAC,CAACS,IAAI,CAAC3B,KAAK,CAAC,GAAG,CAAC,EAAEC,GAAG,CAACyB,CAAC,IAAG;MAAG,IAAGA,CAAC,EAAE,IAAI,CAACT,KAAK,CAACS,CAAC,CAAC;IAAE,CAAC,CAAC,CAAC;EAC9E;EAEAE,QAAQA,CAACtB,IAAW,EAACC,KAAY,EAACiB,QAAe;IAC/C,MAAMnB,EAAE,GAAGwB,IAAI,CAACC,GAAG,EAAE;IACrB,MAAMZ,IAAI,GAAS;MAAEb,EAAE;MAAEC,IAAI;MAAEC,KAAK;MAAEC,IAAI,EAAE,MAAM;MAAEC,KAAK,EAAE,OAAO,GAACJ;IAAE,CAAE;IACvE,IAAI,CAACD,KAAK,CAAC2B,IAAI,CAACb,IAAI,CAAC;IACrB,OAAOnB,EAAE,CAACmB,IAAI,CAAC,CAACS,IAAI,CAAC3B,KAAK,CAAC,GAAG,CAAC,EAAEC,GAAG,CAACyB,CAAC,IAAI,IAAI,CAACT,KAAK,CAACS,CAAC,CAAC,CAAC,CAAC;EAC3D;EACAM,MAAMA,CAAA;IAAI,IAAI,CAACf,KAAK,CAAC,IAAI,CAAC;EAAE;;;uCA3BjBf,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAA+B,OAAA,EAAX/B,WAAW,CAAAgC,IAAA;MAAAC,UAAA,EADC;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}