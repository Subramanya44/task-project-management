{"ast":null,"code":"import { catchError, throwError } from 'rxjs';\nimport { inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ToastService } from '../services/toast.service';\nexport const httpErrorInterceptor = (req, next) => {\n  const router = inject(Router);\n  const toast = inject(ToastService);\n  return next(req).pipe(catchError(error => {\n    console.error('HTTP Error:', error);\n    // Handle based on status code\n    switch (error.status) {\n      case 0:\n        toast.push('Unable to connect to the server. Please check your network.');\n        break;\n      case 400:\n        toast.push(error.error?.message || 'Invalid request.');\n        break;\n      case 401:\n        toast.push('Your session has expired. Please log in again.');\n        localStorage.removeItem('token');\n        router.navigate(['/login']);\n        break;\n      case 403:\n        toast.push('You do not have permission to perform this action.');\n        break;\n      case 404:\n        toast.push('Requested resource not found.');\n        break;\n      case 500:\n        toast.push('Something went wrong on our side. Please try again later.');\n        break;\n      default:\n        toast.push(error.error?.message || 'An unknown error occurred.');\n    }\n    return throwError(() => error);\n  }));\n};","map":{"version":3,"names":["catchError","throwError","inject","Router","ToastService","httpErrorInterceptor","req","next","router","toast","pipe","error","console","status","push","message","localStorage","removeItem","navigate"],"sources":["/home/subramanyahegade/Downloads/task-dashboard/src/app/core/interceptors/http-error.interceptor.ts"],"sourcesContent":["import { HttpInterceptorFn } from '@angular/common/http';\nimport { catchError, throwError } from 'rxjs';\nimport { inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ToastService } from '../services/toast.service';\n\nexport const httpErrorInterceptor: HttpInterceptorFn = (req, next) => {\n  const router = inject(Router);\n  const toast = inject(ToastService);\n\n  return next(req).pipe(\n    catchError(error => {\n      console.error('HTTP Error:', error);\n\n      // Handle based on status code\n      switch (error.status) {\n        case 0:\n          toast.push('Unable to connect to the server. Please check your network.');\n          break;\n        case 400:\n          toast.push(error.error?.message || 'Invalid request.');\n          break;\n        case 401:\n          toast.push('Your session has expired. Please log in again.');\n          localStorage.removeItem('token');\n          router.navigate(['/login']);\n          break;\n        case 403:\n          toast.push('You do not have permission to perform this action.');\n          break;\n        case 404:\n          toast.push('Requested resource not found.');\n          break;\n        case 500:\n          toast.push('Something went wrong on our side. Please try again later.');\n          break;\n        default:\n          toast.push(error.error?.message || 'An unknown error occurred.');\n      }\n\n      return throwError(() => error);\n    })\n  );\n};\n"],"mappings":"AACA,SAASA,UAAU,EAAEC,UAAU,QAAQ,MAAM;AAC7C,SAASC,MAAM,QAAQ,eAAe;AACtC,SAASC,MAAM,QAAQ,iBAAiB;AACxC,SAASC,YAAY,QAAQ,2BAA2B;AAExD,OAAO,MAAMC,oBAAoB,GAAsBA,CAACC,GAAG,EAAEC,IAAI,KAAI;EACnE,MAAMC,MAAM,GAAGN,MAAM,CAACC,MAAM,CAAC;EAC7B,MAAMM,KAAK,GAAGP,MAAM,CAACE,YAAY,CAAC;EAElC,OAAOG,IAAI,CAACD,GAAG,CAAC,CAACI,IAAI,CACnBV,UAAU,CAACW,KAAK,IAAG;IACjBC,OAAO,CAACD,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;IAEnC;IACA,QAAQA,KAAK,CAACE,MAAM;MAClB,KAAK,CAAC;QACJJ,KAAK,CAACK,IAAI,CAAC,6DAA6D,CAAC;QACzE;MACF,KAAK,GAAG;QACNL,KAAK,CAACK,IAAI,CAACH,KAAK,CAACA,KAAK,EAAEI,OAAO,IAAI,kBAAkB,CAAC;QACtD;MACF,KAAK,GAAG;QACNN,KAAK,CAACK,IAAI,CAAC,gDAAgD,CAAC;QAC5DE,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC;QAChCT,MAAM,CAACU,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;QAC3B;MACF,KAAK,GAAG;QACNT,KAAK,CAACK,IAAI,CAAC,oDAAoD,CAAC;QAChE;MACF,KAAK,GAAG;QACNL,KAAK,CAACK,IAAI,CAAC,+BAA+B,CAAC;QAC3C;MACF,KAAK,GAAG;QACNL,KAAK,CAACK,IAAI,CAAC,2DAA2D,CAAC;QACvE;MACF;QACEL,KAAK,CAACK,IAAI,CAACH,KAAK,CAACA,KAAK,EAAEI,OAAO,IAAI,4BAA4B,CAAC;IACpE;IAEA,OAAOd,UAAU,CAAC,MAAMU,KAAK,CAAC;EAChC,CAAC,CAAC,CACH;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}